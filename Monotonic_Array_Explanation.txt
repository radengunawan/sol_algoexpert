To solve the Monotonic Array 
problem, several concepts are 
both explicitly and implicitly 
required:

### Explicit Concepts:
1. **Monotonicity:** 
   - An array is monotonic if 
     it is either entirely 
     non-increasing 
     or 
    non-decreasing.
   - Non-increasing means that 
     no element is greater than 
     the preceding one.
   - Non-decreasing means that 
     no element is smaller than 
     the preceding one.

2. **Array Traversal:** 
   - You need to traverse 
     the array from the first 
     to the last element to check 
     whether the array is 
     monotonic.

3. **Boolean Output:** 
   - The function should return 
     a boolean value 
    (`true` or `false`) based on
    whether the array is monotonic
    or not.

### Implicit Concepts:
1. **Edge Cases:**
   - Consider edge cases like an 
    empty array or an array with 
   a single element, both of which
    are trivially monotonic.
   
2. **Comparisons:**
   - The solution requires 
     comparing each element with 
    the previous one to determine
    if the array is non-increasing
    or non-decreasing.

3. **Efficiency:**
   - The most efficient solution 
     should ideally traverse the 
     array only once (O(n) time 
     complexity), rather than 
    sorting or making multiple 
    passes.

4. **Conditional Logic:**
   - You'll need to handle cases 
     where the array may neither 
     be entirely non-increasing 
     nor non-decreasing.

### Approach:
1. **Initialization:** 
   - Start by assuming the 
     array is both 
     non-increasing
     and 
     non-decreasing.
   
2. **Iterate Through the Array:** 
   - Traverse the array 
     and compare each element 
    with the next one. 
    Update your assumptions 
    about the monotonicity 
as you go.

3. **Final Check:**
   - After traversal, check if 
    the array is either 
   non-increasing or 
   non-decreasing based on your 
   earlier assumptions. 
  If one of them holds true, 
  return `true`; otherwise, 
  return `false`.


REAL EXAMPLE OF MONOTONIC ARRAY

###

### Non-Decreasing 
Monotonic Array:
In this type of array, each 
element is either greater than or 
equal to the previous one.

Example 1:
array = [1, 2, 2, 3, 4, 4, 5]

This array is non-decreasing because 
each element is GREATER than or equal 
to the one before it.

### Non-Increasing 
Monotonic Array:
In this type of array, each element 
is either less than or equal to the 
previous one.

Example 2:
array = [10, 9, 9, 7, 5, 3, 2, 1]

This array is non-increasing 
because each element is less 
than or equal to the one before it.

Edge Case - 
Single Element Array:
A single-element array is 
trivially monotonic because 
there are no other elements 
to compare it to.

Example 3:
array = [42]

This array is monotonic by 
definition since there's only 
one element.

### Edge Case - Empty Array:
An empty array is also 
considered monotonic.

Example 4:
array = []

This array is trivially 
monotonic as there are no 
elements to compare.

Mixed Monotonicity:
An array with elements 
that don't strictly increase 
or decrease but still adhere 
to the definition.

Example 5:
array = [100, 90, 90, 70, 70, 50]

This array is non-increasing 
because each element is less 
than or equal to the one before it.

These examples demonstrate different 
cases where an array can be considered 
monotonic, adhering to the definition 
of non-decreasing or non-increasing 
sequences.


###

UNDERSTANDING MONOTONICITY

###

An array is considered monotonic 
if it is either ENTIRELY NON-DECREASING
or
ENTIRELY NON-INCREASING 

- Non-Decreasing: 
  EACH element is GREATER THAN or EQUAL to 
  the previous element.

- Non-Increasing: 
  EACH element is LESS THAN or EQUAL to 
  the previous element.

Analysis of the Array `[1, 2, 2, 3, 4, 4, 5]`:
- Non-Decreasing Check: 
  - `1 <= 2` (True)
  - `2 <= 2` (True)
  - `2 <= 3` (True)
  - `3 <= 4` (True)
  - `4 <= 4` (True)
  - `4 <= 5` (True)

  Since all comparisons satisfy 
  the non-decreasing condition, 
  the array is non-decreasing.

- Non-Increasing Check**:
  - `1 > 2` (False)
  - Since the first comparison fails, 
    the array is not non-increasing.

Conclusion:
- The array is non-decreasing, which is 
  one of the conditions required for an 
  array to be monotonic.
- It does not need to be non-increasing 
   to be monotonic; it only needs to satisfy 
  one of the two conditions (EITHER non-increasing or non-decreasing).

####

NON-MONOTONIC ARRAY

###

A non-monotonic array is one 
that is neither entirely 
non-decreasing nor entirely 
non-increasing. This means the 
elements in the array do not 
consistently follow either of 
these patterns.

### Example of a Non-Monotonic 
Array:
array = [1, 3, 2, 4, 5]

### Analysis:
1. **Non-Decreasing Check**:
   - `1 <= 3` (True)
   - `3 <= 2` (False) - This comparison 
fails because `3` is greater than `2`.
   - Since one comparison fails, 
the array is not non-decreasing.

2. **Non-Increasing Check**:
   - `1 >= 3` (False) - This 
comparison fails because `1` 
is less than `3`.
   - Since the first comparison fails, 
the array is not non-increasing.

### Conclusion:
Since the array `[1, 3, 2, 4, 5]` 
is neither non-decreasing 
(because of the `3 > 2` step) 
nor non-increasing 
(because of the `1 < 3` step), 
it is non-monotonic.

This array doesn't consistently 
increase or decrease throughout, 
making it a clear example of a 
non-monotonic array.
